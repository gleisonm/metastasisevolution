---
title: "Orthology Data"
author: "Gleison M. Azevedo"
format: html
execute: 
  cache: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  results = FALSE
)
```

## Import libraries

```{r libs}

library(readr)
library(dplyr)
library(purrr)
library(biomaRt)
library(magrittr)
library(KEGGREST)
library(ape)
library(tidyverse)
library(data.table)
library(stringi)
library(AnnotationHub)
library(sourcetools)
library(here)
```

## Define Functions

```{r funcs}
# Function to download needed files
download_if_missing <- function(url, filename = basename(url)) {
  filename <- here::here("assets/", filename)
  if (!file.exists(filename)) {
    download.file(url, filename)
  }
}

# get IDs from STRING DB
get_string_ids <- function(genes_hgnc, species_id = "9606") {

    req <- RCurl::postForm(
    "https://string-db.org/api/tsv/get_string_ids",
    identifiers = paste(genes_hgnc, collapse = "%0D"),  
    echo_query = "1",
    species = species_id
  )
  
  map_ids <- read.table(text = req, sep = "\t", header = TRUE, quote = "") %>%
    dplyr::select(-queryIndex) %>%
    unique()
  
  map_ids$stringId <- substring(map_ids$stringId, 6, 1000)
  
  return(map_ids)
}

 # Get STRING interactions
 get_network_interaction <- function(map_ids, species_id = "9606") {
 
   identifiers <- map_ids %>% pull(stringId) %>% na.omit %>% paste0(collapse="%0d") 
 
   req2 <- RCurl::postForm(
     "https://string-db.org/api/tsv/network",
     identifiers = identifiers, 
     required_core = "0", 
     species = species_id 
   )
   
   int_network <- read.table(text = req2, sep = "\t", header = TRUE)
   
   int_network <- unique(int_network)
   
   return(int_network)
 }

 ## Recomputing scores
combine_scores <- function(dat, evidences = "all", confLevel = 0.4) {
  if(evidences[1] == "all"){
    edat<-dat[,-c(1,2,ncol(dat))]
  } else {
    if(!all(evidences%in%colnames(dat))){
      stop("NOTE: one or more 'evidences' not listed in 'dat' colnames!")
    }
    edat<-dat[,evidences]
  }
  if (any(edat > 1)) {
    edat <- edat/1000
  }
  edat<-1-edat
  sc<- apply(X = edat, MARGIN = 1, FUN = function(x) 1-prod(x))
  dat <- cbind(dat[,c(1,2)],combined_score = sc)
  idx <- dat$combined_score >= confLevel
  dat <-dat[idx,]
  return(dat)
}
```

## Read data

```{r data}
# Metastasis Genes data frame
df <- vroom::vroom("../results/metastasis_genes/metastasis_genes.csv")

# NCBI Eukaryotes 
load('../assets/string_eukaryotes.rda')

## Table with Orthologous Groups and their proteins
#download_if_missing("https://stringdb-static.org/download/COG.mappings.v11.0.txt.gz")

cogs <- fread(
  "../assets/COG.mappings.v11.0.txt.gz",
  header           = F,
  stringsAsFactors = F,
  skip             = 1,
  sep              = "\t",
  col.names        = c("taxid.string_id","cog_id"),
  select           = c(1,4),
  quote            = ""
)
```

## Process Orthology Data

```{r run}
# Query by STRING API
map_ids <- get_string_ids(df$external_gene_name) 

# Spliting first column into taxid and string_id
separated_ids <- cogs %$% stri_split_fixed(taxid.string_id, pattern = ".", n = 2, simplify = T)

cogs[["taxid"]]     <- separated_ids[, 1]
cogs[["string_id"]] <- separated_ids[, 2]

# Freeing up some memory
rm(separated_ids)
gc()

# keeping only eukaryotes
cogs %<>% dplyr::select(-taxid.string_id) %>% 
  filter(taxid %in% string_eukaryotes[["taxid"]])
gc()

cogdata2 <- cogs %>% 
  dplyr::select(protein_id = string_id, ssp_id = taxid, og_id = cog_id)
cogdata2 <- as.data.frame(cogdata2)

# Subsetting cogs of interest - METASTASIS GENES
gene_cogs <- cogs %>%
  filter(string_id %in% map_ids[["stringId"]]) %>%
  dplyr::select(-taxid) %>%
  group_by(string_id) %>%
  summarise(n = n(), cog_id = paste(cog_id, collapse = " / "))

## Proteins with multiple COGs
gene_cogs %>% filter(n > 1)

# Resolving main proteins
gene_cogs_resolved <- tribble(
  ~string_id, ~cog_id,
"ENSP00000239462",	"KOG1225",
"ENSP00000264808",	"KOG1721",	
"ENSP00000265562",	"KOG2220",	
"ENSP00000323856",	"COG5069",		
"ENSP00000359085",  "KOG3512",		
"ENSP00000361467",  "KOG3528",		
"ENSP00000363317",	"KOG3528",		
"ENSP00000383042",  "KOG0685",		
"ENSP00000418112",	"COG5599",		
"ENSP00000422533",	"KOG3545"
)

# Removing unresolved cases and adding manual assignments
gene_cogs %<>%
  filter(n == 1) %>%
 dplyr:: select(-n) %>%
  bind_rows(gene_cogs_resolved)

# Exporting for package use
gene_cogs |> 
  vroom::vroom_write(file = here("results/orthology_data/gene_cogs.csv"), delim = ",")
```

## Get interaction network from STRINGdb

```{r network}
# Get proteins interaction
string_edgelist <- get_network_interaction(map_ids)

# Recomputing scores
string_edgelist <- combine_scores(string_edgelist, 
                                  evidences = c("ascore", "escore", "dscore"), 
                                  confLevel = 0.4)

colnames(string_edgelist) <- c("stringId_A", "stringId_B", "combined_score")

# Remove o species id
string_edgelist$stringId_A <- substring(string_edgelist$stringId_A, 6, 1000)
string_edgelist$stringId_B <- substring(string_edgelist$stringId_B, 6, 1000)

# How many edgelist proteins are absent in gene_ids? (should return 0)
setdiff(
  string_edgelist %$% c(stringId_A, stringId_B),
  map_ids %>% pull(stringId)
) 

# Exporting for package use
string_edgelist |> 
  vroom::vroom_write(file = here("results/orthology_data/string_edgelist.csv"), delim = ",")
```
